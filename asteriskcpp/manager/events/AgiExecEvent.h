/*
 * AgiExecEvent.h
 *
 *  Created on: Aug 3, 2011
 *      Author: a-campos
 */

#ifndef AGIEXECEVENT_H_
#define AGIEXECEVENT_H_

#include "asteriskcpp/manager/events/ManagerEvent.h"

namespace asteriskcpp {

    /**
     * AgiExecEvents are triggered when an AGI command is executed. For each command two events are triggered:
     * one before excution ("Start") and one after execution ("End").
     * <p/>
     * The following sub events are reported:
     * <ul>
     * <li>Start: Execution of an AGI command has started.</li>
     * <li>End:   Execution of an AGI command has finished.</li>
     * </ul>
     * It is implemented in <code>res/res_agi.c</code>.
     * <p/>
     * Available since Asterisk 1.6
     *
     * @since 1.0.0
     */
    class AgiExecEvent : public ManagerEvent {
    public:
        AgiExecEvent(const std::string & values);
        virtual ~AgiExecEvent();

        /**
         * Returns the name of the channel this event occurred on.
         *
         * @return the name of the channel this event occurred on.
         */
        const std::string& getChannel() const;

        /**
         * Returns the sub event type. This is either "Start" or "End".
         *
         * @return the sub event type.
         * @see #SUB_EVENT_START
         * @see #SUB_EVENT_END
         */
        const std::string& getSubEvent() const;

        /**
         * Returns the command id. The command is a random number generated by Asterisk that allows
         * matching the "End" sub event with the corresponding "Start" sub event.
         *
         * @return the command id.
         */
        const std::string& getCommandId() const;

        /**
         * Returns the AGI command.
         *
         * @return the AGI command.
         */
        const std::string& getCommand() const;

        /**
         * Returns the result code.
         *
         * @return the result code.
         */
        const std::string& getResultCode() const;

        /**
         * Returns the result as a string.<p>
         * They correspond to the numeric values returned by {@link #getResultCode()}. Usually you will want to
         * stick with the numeric values.<p>
         * Possible values are:
         * <ul>
         * <li>Failure (corresponds to result code -1)</li>
         * <li>Success (corresponds to result code 200)</li>
         * <li>KeepAlive (corresponds to result code 210)</li>
         * <li>Command not permitted on a dead channel (corresponds to result code 511)</li>
         * <li>Usage (corresponds to result code 520)</li>
         * </ul>
         *
         * @return a string respresentation of the result.
         */
        const std::string& getResult() const;
    };

}

#endif /* AGIEXECEVENT_H_ */
